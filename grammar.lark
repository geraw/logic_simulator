// Grammar definition for the digital logic circuit description language
// Supports combinational and sequential logic components with macro definitions

// Root rule - a circuit is a sequence of statements
start: statement*

?statement: assignment | macro_definition

// Assignment rule - binds an output signal to a logic expression
// Example: A = NAND(B, C)
assignment: NAME "=" expression

// Macro definition rule - creates reusable circuit components
// Example: NOT(x) := NAND(x, x)
macro_definition: NAME "(" [param_list] ")" ":=" expression
param_list: NAME ("," NAME)*

// Expression types supported in the circuit description
expression: call
          | variable
          | number

// Function call rule - used for built-in gates and macros
// Examples: NAND(x, y), D(signal, default_value)
call: NAME "(" [arg_list] ")"
arg_list: expression ("," expression)*

variable: NAME

// Binary values only (0 or 1)
number: INT_VAL
INT_VAL: "0" | "1"


// Import common terminals from the Lark library
%import common.CNAME -> NAME  // Standard identifier syntax
%import common.WS            // Standard whitespace
%import common.SH_COMMENT -> COMMENT  // Shell-style comments (#)

// Ignore whitespace and comments during parsing
%ignore WS
%ignore COMMENT

