# Test circuit for palindrome detection
# Macro Definitions (using only NAND)
NOT(x)    := NAND(x, x)
AND(x,y)  := NOT(NAND(x, y))
OR(x,y)     := NAND(NOT(x), NOT(y)) # De Morgan's Law version
XOR(x,y)    := OR(AND(x, NOT(y)), AND(NOT(x), y))

# Store input bits using D flip-flops to compare with future bits
X1 = D(X, 0)      # X[0] delayed by 1
X2 = D(X1, 0)     # X[0] delayed by 2
X3 = D(X2, 0)     # X[0] delayed by 3
X4 = D(X3, 0)     # X[0] delayed by 4
X5 = D(X4, 0)     # X[0] delayed by 5

# Compare corresponding bits
P1 = NOT(XOR(X5, X ))  # First and last bits
P2 = NOT(XOR(X4, X1))  # Second and second-to-last bits
P3 = NOT(XOR(X3, X2))  # Middle pairs

# Generate output (zero for first 6 bits, then result)
Y = AND(AND(AND(P1, P2), P3), D(D(D(D(D(1, 0), 0), 0), 0), 0))
