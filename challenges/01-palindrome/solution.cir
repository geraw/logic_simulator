# Test circuit for palindrome detection
# Macro Definitions (using only NAND)
NOT(x)    := NAND(x, x)
AND(x,y)  := NOT(NAND(x, y))
OR(x,y)     := NAND(NOT(x), NOT(y)) # De Morgan's Law version
XOR(x,y)    := OR(AND(x, NOT(y)), AND(NOT(x), y))

# Store input bits using D flip-flops to compare with future bits
I1 = D(I, 0)      # I[0] delayed by 1
I2 = D(I1, 0)     # I[0] delayed by 2
I3 = D(I2, 0)     # I[0] delayed by 3
I4 = D(I3, 0)     # I[0] delayed by 4
I5 = D(I4, 0)     # I[0] delayed by 5

# Compare corresponding bits
P1 = NOT(XOR(I5, I ))  # First and last bits
P2 = NOT(XOR(I4, I1))  # Second and second-to-last bits
P3 = NOT(XOR(I3, I2))  # Middle pairs

# Generate output (zero for first 6 bits, then result)
O = AND(AND(AND(P1, P2), P3), D(D(D(D(D(1, 0), 0), 0), 0), 0))
